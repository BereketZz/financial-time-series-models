# -*- coding: utf-8 -*-
"""task5_strategy_backtesting.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15N7Wmo847pvzW4T9cJHPL71FwuZDp2Es
"""

# ==============================
# Task 5: Strategy Backtesting
# ==============================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

plt.rcParams["figure.figsize"] = (12, 7)

# 1) Define backtest period
bt_start = "2024-08-01"
bt_end   = "2025-07-31"

assets = ["TSLA", "BND", "SPY"]

# Download prices
prices_raw = yf.download(assets, start=bt_start, end=bt_end, auto_adjust=False, progress=False)

if ("Adj Close" in prices_raw.columns.get_level_values(0)):
    prices = prices_raw["Adj Close"].copy()
else:
    prices = prices_raw["Close"].copy()

prices = prices.dropna()

# Sanity check
if prices.shape[0] < 200:
    raise SystemExit("Not enough backtest data. Check tickers/dates.")

# 2) Define benchmark weights (60% SPY, 40% BND)
benchmark_weights = pd.Series({"SPY": 0.6, "BND": 0.4, "TSLA": 0.0})

# 3) Strategy weights from Task 4 (example from Max Sharpe)
# Replace with actual weights you got in Task 4 output
strategy_weights = pd.Series({"TSLA": 0.55, "BND": 0.25, "SPY": 0.20})

# Ensure weights sum to 1
strategy_weights = strategy_weights / strategy_weights.sum()

# 4) Calculate portfolio daily returns
daily_returns = prices.pct_change().dropna()

strategy_returns = (daily_returns * strategy_weights).sum(axis=1)
benchmark_returns = (daily_returns * benchmark_weights).sum(axis=1)

# 5) Calculate cumulative returns
strategy_cum = (1 + strategy_returns).cumprod()
benchmark_cum = (1 + benchmark_returns).cumprod()

# 6) Performance metrics
def sharpe_ratio(returns, rf=0.0):
    excess = returns - rf/252
    return np.sqrt(252) * excess.mean() / returns.std()

metrics = pd.DataFrame({
    "Total Return": [strategy_cum.iloc[-1]-1, benchmark_cum.iloc[-1]-1],
    "Annualized Volatility": [strategy_returns.std()*np.sqrt(252), benchmark_returns.std()*np.sqrt(252)],
    "Sharpe Ratio": [sharpe_ratio(strategy_returns), sharpe_ratio(benchmark_returns)]
}, index=["Strategy", "Benchmark"])

print("=== Backtest Performance ===")
print(metrics.applymap(lambda x: f"{x*100:.2f}%" if isinstance(x,float) and abs(x)<5 else x))

# 7) Plot
plt.plot(strategy_cum, label="Strategy (Max Sharpe Weights)")
plt.plot(benchmark_cum, label="Benchmark (60/40 SPY/BND)")
plt.title("Backtest: Strategy vs Benchmark")
plt.ylabel("Cumulative Growth of $1")
plt.legend()
plt.grid(alpha=0.3)
plt.show()

# 8) Conclusion
if strategy_cum.iloc[-1] > benchmark_cum.iloc[-1]:
    print("Conclusion: Strategy outperformed benchmark in this backtest period.")
else:
    print("Conclusion: Strategy underperformed benchmark in this backtest period.")